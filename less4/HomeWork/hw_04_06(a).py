# 6) Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""это итератор А"""

from sys import argv
from itertools import count


def help_me():
    print('скрипт принимает от 1 до 2 параметров\n'
          'генерируюет целые числа, начиная с указанного в первом параметре\n'
          'второй параметр - длина списка (по умолчанию равен 10\n'
          'оба параметра целые числовые\n'
          'последующие параметры будут проигнорированы')


"""with itertools:"""


# def gen_ints(number, count_number=10):
#     """итератор, генерирующий целые числа, начиная с указанного
#
#     :param number: начальное значение генератора
#     :param count_number: конечное значение генератора (по умолчанию 10)
#     :return: итератор
#     """
#     c = 0
#     for el in count(number):
#         if c >= count_number:
#             break
#         c += 1
#         yield el


"""without itertools:"""


def gen_ints(number, count_number=10):
    """итератор, генерирующий целые числа, начиная с указанного

    :param number: начальное значение генератора
    :param count_number: конечное значение генератора (по умолчанию 10)
    :return: итератор
    """
    yield [el for el in (param for param in range(number, number + count_number))]


try:
    print(list(gen_ints(int(argv[1])))[0]) if len(argv) == 2 else print(list(gen_ints(int(argv[1]), int(argv[2])))[0])
except IndexError:
    help_me()
except ValueError:
    help_me()
